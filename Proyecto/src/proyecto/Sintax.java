
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 05 17:15:58 CDT 2022
//----------------------------------------------------

package proyecto;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 05 17:15:58 CDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\005\005\000\002\006\005" +
    "\000\002\004\003\000\002\004\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\013\000\002\010\011\000\002\011\007\000\002\012\011" +
    "\000\002\013\005\000\002\014\005\000\002\015\005\000" +
    "\002\016\006\000\002\017\005\000\002\020\005\000\002" +
    "\021\004\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\005" +
    "\000\002\024\005\000\002\025\005\000\002\026\004\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\044\004\001\002\000\004\032\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\037\010\067\012\001\002\000\022\011\ufffe\013" +
    "\ufffe\014\ufffe\032\ufffe\037\ufffe\040\ufffe\043\ufffe\056\ufffe" +
    "\001\002\000\022\011\022\013\034\014\021\032\040\037" +
    "\032\040\036\043\031\056\041\001\002\000\004\040\015" +
    "\001\002\000\022\011\uffff\013\uffff\014\uffff\032\uffff\037" +
    "\uffff\040\uffff\043\uffff\056\uffff\001\002\000\004\037\020" +
    "\001\002\000\004\063\016\001\002\000\004\040\017\001" +
    "\002\000\004\037\ufffc\001\002\000\022\011\ufffd\013\ufffd" +
    "\014\ufffd\032\ufffd\037\ufffd\040\ufffd\043\ufffd\056\ufffd\001" +
    "\002\000\004\030\130\001\002\000\004\030\117\001\002" +
    "\000\004\033\ufff4\001\002\000\004\033\116\001\002\000" +
    "\004\033\ufff7\001\002\000\004\033\ufff6\001\002\000\004" +
    "\033\ufffb\001\002\000\004\033\ufff9\001\002\000\004\040" +
    "\114\001\002\000\004\033\ufffa\001\002\000\004\033\ufff3" +
    "\001\002\000\004\032\040\001\002\000\004\033\ufff8\001" +
    "\002\000\004\016\103\001\002\000\004\033\ufff5\001\002" +
    "\000\022\011\022\013\034\014\021\032\040\037\032\040" +
    "\036\043\031\056\041\001\002\000\020\030\047\040\055" +
    "\041\061\050\044\072\057\073\056\075\046\001\002\000" +
    "\004\037\100\001\002\000\004\064\076\001\002\000\016" +
    "\030\047\040\055\041\061\072\057\073\056\075\046\001" +
    "\002\000\004\075\073\001\002\000\010\030\047\040\055" +
    "\041\061\001\002\000\020\030\047\040\055\041\061\050" +
    "\044\072\057\073\056\075\046\001\002\000\012\031\uffe4" +
    "\037\uffe4\055\uffe4\064\uffe4\001\002\000\014\031\uffe3\037" +
    "\uffe3\055\uffe3\064\uffe3\074\066\001\002\000\004\055\064" +
    "\001\002\000\012\031\uffe7\037\uffe7\055\uffe7\064\uffe7\001" +
    "\002\000\020\031\uffde\037\uffde\055\uffde\064\uffde\074\uffde" +
    "\075\uffde\076\uffde\001\002\000\020\031\uffdb\037\uffdb\055" +
    "\uffdb\064\uffdb\074\uffdb\075\uffdb\076\uffdb\001\002\000\012" +
    "\031\uffe5\037\uffe5\055\uffe5\064\uffe5\001\002\000\012\031" +
    "\uffe6\037\uffe6\055\uffe6\064\uffe6\001\002\000\004\076\062" +
    "\001\002\000\020\031\uffdc\037\uffdc\055\uffdc\064\uffdc\074" +
    "\uffdc\075\uffdc\076\uffdc\001\002\000\012\030\047\040\055" +
    "\041\061\075\046\001\002\000\016\031\uffe0\037\uffe0\055" +
    "\uffe0\064\uffe0\074\uffe0\075\uffe0\001\002\000\020\030\047" +
    "\040\055\041\061\050\044\072\057\073\056\075\046\001" +
    "\002\000\010\031\uffe9\037\uffe9\064\uffe9\001\002\000\012" +
    "\030\047\040\055\041\061\075\046\001\002\000\012\031" +
    "\uffe2\037\uffe2\055\uffe2\064\uffe2\001\002\000\004\031\071" +
    "\001\002\000\020\031\uffdd\037\uffdd\055\uffdd\064\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\001\002\000\020\031\uffdf\037\uffdf" +
    "\055\uffdf\064\uffdf\074\uffdf\075\uffdf\076\uffdf\001\002\000" +
    "\012\030\047\040\055\041\061\075\046\001\002\000\014" +
    "\031\uffe1\037\uffe1\055\uffe1\064\uffe1\074\uffe1\001\002\000" +
    "\012\031\uffe8\037\uffe8\055\uffe8\064\uffe8\001\002\000\020" +
    "\030\047\040\055\041\061\050\044\072\057\073\056\075" +
    "\046\001\002\000\006\031\uffea\037\uffea\001\002\000\004" +
    "\033\uffed\001\002\000\004\033\102\001\002\000\012\012" +
    "\uffec\033\uffec\065\uffec\071\uffec\001\002\000\020\030\047" +
    "\040\055\041\061\050\044\072\057\073\056\075\046\001" +
    "\002\000\004\037\105\001\002\000\004\033\uffeb\001\002" +
    "\000\004\071\107\001\002\000\004\030\110\001\002\000" +
    "\020\030\047\040\055\041\061\050\044\072\057\073\056" +
    "\075\046\001\002\000\004\031\112\001\002\000\004\037" +
    "\113\001\002\000\004\033\uffef\001\002\000\004\037\115" +
    "\001\002\000\004\033\uffee\001\002\000\004\002\000\001" +
    "\002\000\020\030\047\040\055\041\061\050\044\072\057" +
    "\073\056\075\046\001\002\000\004\031\121\001\002\000" +
    "\004\070\122\001\002\000\004\032\040\001\002\000\006" +
    "\012\125\065\124\001\002\000\004\033\ufff1\001\002\000" +
    "\004\032\040\001\002\000\004\065\127\001\002\000\004" +
    "\033\ufff2\001\002\000\020\030\047\040\055\041\061\050" +
    "\044\072\057\073\056\075\046\001\002\000\004\031\132" +
    "\001\002\000\004\032\040\001\002\000\004\033\ufff0\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\010\005\012" +
    "\001\001\000\002\001\001\000\024\004\023\007\026\010" +
    "\027\011\034\012\024\013\025\014\036\015\022\016\032" +
    "\001\001\000\004\006\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\100\007\026\010\027\011\034" +
    "\012\024\013\025\014\036\015\022\016\032\001\001\000" +
    "\024\017\041\020\042\021\051\022\052\023\047\024\050" +
    "\025\044\026\057\027\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\022\074\023\047\024\050\025\044" +
    "\026\057\027\053\001\001\000\002\001\001\000\004\027" +
    "\071\001\001\000\024\017\067\020\042\021\051\022\052" +
    "\023\047\024\050\025\044\026\057\027\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\062\027\053\001\001\000\002\001\001\000" +
    "\020\021\064\022\052\023\047\024\050\025\044\026\057" +
    "\027\053\001\001\000\002\001\001\000\012\024\066\025" +
    "\044\026\057\027\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\073\026\057\027\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\020\076\021\051\022\052\023\047\024" +
    "\050\025\044\026\057\027\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\017\103\020\042\021\051\022\052\023\047\024\050" +
    "\025\044\026\057\027\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\017\110\020\042\021\051\022\052\023\047\024\050\025" +
    "\044\026\057\027\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\017\117\020\042\021\051" +
    "\022\052\023\047\024\050\025\044\026\057\027\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\017\130\020\042\021\051\022\052\023\047\024\050\025" +
    "\044\026\057\027\053\001\001\000\002\001\001\000\004" +
    "\015\132\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= Parentesis_a bExpresion Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // signoFactor ::= factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("signoFactor",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // signoFactor ::= sumaOp factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("signoFactor",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // termino ::= signoFactor multOp signoFactor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= termino sumaOp termino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // relacion ::= expresion relOp expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("relacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relacion ::= expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("relacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // b_factor ::= relacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("b_factor",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // b_factor ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("b_factor",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // b_factor ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("b_factor",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // not_factor ::= b_factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("not_factor",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // not_factor ::= Not b_factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("not_factor",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // b_term ::= not_factor And not_factor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("b_term",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bExpresion ::= b_term Or b_term 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bExpresion",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= Identificador Igual bExpresion P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= Llave_a listaSentencias Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentWrite ::= Write bExpresion P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentWrite",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentRead ::= Read Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentRead",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // repeticion ::= Do bloque Until Parentesis_a bExpresion Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("repeticion",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // iteracion ::= While Parentesis_a bExpresion Parentesis_c bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("iteracion",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seleccion ::= If Parentesis_a bExpresion Parentesis_c Then bloque Fi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("seleccion",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seleccion ::= If Parentesis_a bExpresion Parentesis_c Then bloque Else bloque Fi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("seleccion",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= bloque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= sentWrite 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= sentRead 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= repeticion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= iteracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= seleccion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaSentencias ::= P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("listaSentencias",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaSentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("listaSentencias",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaId ::= Identificador Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("listaId",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= tipo listaId P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaDeclaracion ::= P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaDeclaracion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("listaDeclaracion",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Program Llave_a listaDeclaracion listaSentencias Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

